1. Різниця між ключовими та зарезервованими словами
Ключові слова: Мають спеціальне значення (наприклад, if, while), не можуть використовуватися як імена
Зарезервовані слова: Включають ключові слова і слова, що не використовуються зараз, але зарезервовані

2. Примітивні типи даних
byte: 8 біт (від -128 до 127), наприклад, значення кольору
short: 16 біт (від -32,768 до 32,767), для невеликих чисел
int: 32 біт (від -2,147,483,648 до 2,147,483,647), для загальних чисел (рахунок у матчі)
long: 64 біт (від -9,223,372,036,854,775,808 до 9,223,372,036,854,775,807), для великих чисел (маса всесвіту)
float: 32 біти, для чисел з плаваючою комою
double: 64 біти, для точних обчислень
char: 16 біт (символи), наприклад, букви
boolean: 1 біт (true/false)

3. Знакові та беззнакові типи
Знакові: Можуть бути позитивними та негативними (byte, short, int, long)
Беззнакові: Можуть бути тільки ненегативними. У Java немає явних беззнакових типів, але char можна вважати беззнаковим

4. Максимальні значення для типів
short: 32,767
char: 65,535
int: 2,147,483,647
long: 9,223,372,036,854,775,807

5. Діапазон типу byte
Діапазон -128..127 через двохкомплементарний код: один біт для знака, 7 бітів для чисел

6. Система числення
Система числення: Спосіб представлення чисел (десяткова, двійкова, шістнадцяткова). Переведення між системами відбувається через ділення або множення на основу нової системи

7. Доповняльний код
Доповняльний код: Представлення негативних чисел у двійковій системі. Отримується інверсією бітів та додаванням 1

8. Результат коду

int a = 2_000_000_000;
int b = 2_000_000_000;
int c = a + b;
System.out.println(c);
Виведе -294967296 через переповнення типу int

9. Різниця між float і double
float: 32 біти, менша точність
double: 64 біти, більша точність

10. Число з рухомою комою
Число з рухомою комою: Формат для представлення чисел. Мантиса — значення, степінь — скільки разів мантису слід зсунути

11. Double.NaN
Double.NaN: Представляє "Не число" для недійсних результатів, наприклад, квадратний корінь з негативного числа

12. Результат коду
System.out.println(Double.NaN == Double.NaN);

Виведе false, оскільки NaN не рівний сам собі.

13. Преінкремент vs Постінкремент
Преінкремент (++a): Збільшує a перед використанням.
Постінкремент (a++): Використовує a, а потім збільшує.
14. Логічна та побітова операція AND
Логічна AND (&&): Короткозамкнена, працює з логічними значеннями.
Побітова AND (&): Працює на бітовому рівні.
15. OR vs XOR
OR (||): Повертає true, якщо хоча б один операнд true.
XOR (^): Повертає true, якщо лише один з операндів true.
16. Аналіз коду

boolean a = true && false | false; // a = false
System.out.println(a = false); // Виведе false

boolean b = true && false || false; // b = false
System.out.println(b = true); // Виведе true
Перший рядок виведе false, другий — true.